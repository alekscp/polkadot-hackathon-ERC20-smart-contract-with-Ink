"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _Abi = _interopRequireDefault(require("./Abi"));

var testContracts = _interopRequireWildcard(require("../test/contracts"));

var userContracts = _interopRequireWildcard(require("../test/contracts/user"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const abis = _objectSpread({}, testContracts);

const userAbis = _objectSpread({}, userContracts);

function compareTypes(name) {
  const abi = new _Abi.default(abis[name] || userAbis[name]);

  try {
    const cmpPath = _path.default.join(__dirname, `../test/compare/${name}.test.json`);

    if (!_fs.default.existsSync(cmpPath)) {
      _fs.default.writeFileSync(cmpPath, JSON.stringify(abi.registry.metaTypeDefs, null, 2), {
        flag: 'w'
      });
    } // eslint-disable-next-line @typescript-eslint/no-var-requires


    expect(abi.registry.metaTypeDefs).toEqual(require(cmpPath));
  } catch (error) {
    console.error(JSON.stringify(abi.registry.metaTypeDefs));
    throw error;
  }
}

describe('MetaRegistry', () => {
  describe('types', () => {
    it('initializes from a contract ABI (flipper)', () => {
      compareTypes('flipper');
    });
    it('initializes from a contract ABI (incrementer)', () => {
      compareTypes('incrementer');
    });
    it('initializes from a contract ABI (erc20)', () => {
      compareTypes('erc20');
    });
    it('initializes from a contract ABI (dns)', () => {
      compareTypes('dns');
    });
    it('initializes from a contract ABI (erc721)', () => {
      compareTypes('erc721');
    });
    it('initializes from a contract ABI (multisig_plain)', () => {
      compareTypes('multisigPlain');
    });
  });
  describe('user ABIs', () => {
    it('initializes from a contract ABI (withString)', () => {
      compareTypes('withString');
    });
  });
  it('stores base project as JSON', () => {
    expect(new _Abi.default(abis.dns).json).toEqual(abis.dns);
  });
});