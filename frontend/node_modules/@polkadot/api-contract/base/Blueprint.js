"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BlueprintSubmittableResult = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));

var _api = require("@polkadot/api");

var _util = require("@polkadot/util");

var _util2 = require("../util");

var _Base = _interopRequireDefault(require("./Base"));

var _Contract = _interopRequireDefault(require("./Contract"));

// Copyright 2017-2020 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
class BlueprintSubmittableResult extends _api.SubmittableResult {
  constructor(result, contract) {
    super(result);
    this.contract = void 0;
    this.contract = contract;
  }

}

exports.BlueprintSubmittableResult = BlueprintSubmittableResult;

var _tx = (0, _classPrivateFieldLooseKey2.default)("tx");

var _deploy = (0, _classPrivateFieldLooseKey2.default)("deploy");

class Blueprint extends _Base.default {
  constructor(api, abi, codeHash, decorateMethod) {
    super(api, abi, decorateMethod);
    this.codeHash = void 0;
    Object.defineProperty(this, _tx, {
      writable: true,
      value: {}
    });
    Object.defineProperty(this, _deploy, {
      writable: true,
      value: (constructorOrId, endowment, gasLimit, params) => {
        return this.api.tx.contracts.instantiate(endowment, gasLimit, this.codeHash, (0, _util2.encodeMessage)(this.registry, this.abi.findConstructor(constructorOrId), params)).withResultTransform(result => new BlueprintSubmittableResult(result, (0, _util2.applyOnEvent)(result, 'Instantiated', record => new _Contract.default(this.api, this.abi, record.event.data[1], this._decorateMethod))));
      }
    });
    this.codeHash = this.registry.createType('Hash', codeHash);
    this.abi.constructors.forEach(c => {
      const messageName = (0, _util.stringCamelCase)(c.identifier);

      if ((0, _util.isUndefined)((0, _classPrivateFieldLooseBase2.default)(this, _tx)[_tx][messageName])) {
        (0, _classPrivateFieldLooseBase2.default)(this, _tx)[_tx][messageName] = (endowment, gasLimit, ...params) => (0, _classPrivateFieldLooseBase2.default)(this, _deploy)[_deploy](c, endowment, gasLimit, params);
      }
    });
  }

  get tx() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _tx)[_tx];
  }

  createContract(constructorOrId, endowment, gasLimit, ...params) {
    return (0, _classPrivateFieldLooseBase2.default)(this, _deploy)[_deploy](constructorOrId, endowment, gasLimit, params);
  }

}

exports.default = Blueprint;