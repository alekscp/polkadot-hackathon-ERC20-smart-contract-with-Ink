import { ApiTypes, DecorateMethod } from '@polkadot/api/types';
import { SubmittableExtrinsic } from '@polkadot/api/submittable/types';
import { Hash } from '@polkadot/types/interfaces';
import { AnyJson, CodecArg, ISubmittableResult } from '@polkadot/types/types';
import { AbiConstructor } from '../types';
import { MapConstructorExec } from './types';
import BN from 'bn.js';
import { SubmittableResult } from '@polkadot/api';
import ApiBase from '@polkadot/api/base';
import Abi from '../Abi';
import Base from './Base';
import Contract from './Contract';
export declare class BlueprintSubmittableResult<ApiType extends ApiTypes> extends SubmittableResult {
    readonly contract?: Contract<ApiType>;
    constructor(result: ISubmittableResult, contract?: Contract<ApiType>);
}
export default class Blueprint<ApiType extends ApiTypes> extends Base<ApiType> {
    #private;
    readonly codeHash: Hash;
    constructor(api: ApiBase<ApiType>, abi: AnyJson | Abi, codeHash: string | Hash | Uint8Array, decorateMethod: DecorateMethod<ApiType>);
    get tx(): MapConstructorExec<ApiType>;
    createContract(constructorOrId: AbiConstructor | string | number, endowment: BigInt | string | number | BN, gasLimit: BigInt | string | number | BN, ...params: CodecArg[]): SubmittableExtrinsic<ApiType, BlueprintSubmittableResult<ApiType>>;
}
