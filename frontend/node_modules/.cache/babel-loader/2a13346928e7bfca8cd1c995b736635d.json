{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _networks = require(\"@polkadot/networks\"); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst defaults = {\n  allowedDecodedLengths: [1, 2, 4, 8, 32, 33],\n  // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte\n  allowedEncodedLengths: [3, 4, 6, 10, 35, 36],\n  allowedPrefix: _networks.available.map(({\n    prefix\n  }) => prefix),\n  prefix: 42\n};\nvar _default = defaults;\nexports.default = _default;","map":{"version":3,"sources":["/Users/aclapinpepin/code/substrate-front-end-template/node_modules/@polkadot/api-contract/node_modules/@polkadot/util-crypto/address/defaults.js"],"names":["Object","defineProperty","exports","value","default","_networks","require","defaults","allowedDecodedLengths","allowedEncodedLengths","allowedPrefix","available","map","prefix","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAvB,C,CAEA;AACA;;;AACA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,qBAAqB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,EAAjB,CADR;AAEf;AACAC,EAAAA,qBAAqB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAc,EAAd,EAAkB,EAAlB,CAHR;AAIfC,EAAAA,aAAa,EAAEL,SAAS,CAACM,SAAV,CAAoBC,GAApB,CAAwB,CAAC;AACtCC,IAAAA;AADsC,GAAD,KAEjCA,MAFS,CAJA;AAOfA,EAAAA,MAAM,EAAE;AAPO,CAAjB;AASA,IAAIC,QAAQ,GAAGP,QAAf;AACAL,OAAO,CAACE,OAAR,GAAkBU,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _networks = require(\"@polkadot/networks\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst defaults = {\n  allowedDecodedLengths: [1, 2, 4, 8, 32, 33],\n  // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte\n  allowedEncodedLengths: [3, 4, 6, 10, 35, 36],\n  allowedPrefix: _networks.available.map(({\n    prefix\n  }) => prefix),\n  prefix: 42\n};\nvar _default = defaults;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}