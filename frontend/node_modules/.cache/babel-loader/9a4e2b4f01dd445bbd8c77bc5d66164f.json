{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatData = formatData;\nexports.applyOnEvent = applyOnEvent;\nexports.encodeMessage = encodeMessage;\n\nvar _types = require(\"@polkadot/types\");\n\nvar _util = require(\"@polkadot/util\"); // Copyright 2017-2020 @polkadot/rpc-core authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction formatData(registry, data, {\n  type\n}) {\n  return (0, _types.createTypeUnsafe)(registry, type, [data], true);\n}\n\nfunction applyOnEvent(result, type, fn) {\n  if (result.isInBlock || result.isFinalized) {\n    const record = result.findRecord('contracts', type);\n\n    if (record) {\n      return fn(record);\n    }\n  }\n\n  return undefined;\n}\n\nfunction encodeMessage(registry, message, params) {\n  (0, _util.assert)(message, 'Attempted to call an invalid contract message');\n  (0, _util.assert)(params.length === message.args.length, `Expected ${message.args.length} arguments to contract message '${message.identifier}', found ${params.length}`);\n  const Clazz = (0, _types.createClass)(registry, JSON.stringify(message.args.reduce((r, {\n    name,\n    type\n  }) => {\n    r[name] = type.displayName || (0, _types.encodeTypeDef)(type);\n    return r;\n  }, {\n    __selector: 'ContractSelector'\n  })));\n  return (0, _util.compactAddLength)(new Clazz(registry, message.args.reduce((r, {\n    name\n  }, index) => {\n    r[name] = params[index];\n    return r;\n  }, {\n    __selector: message.selector\n  })).toU8a());\n}","map":{"version":3,"sources":["/Users/aclapinpepin/code/substrate-front-end-template/node_modules/@polkadot/api-contract/util.js"],"names":["Object","defineProperty","exports","value","formatData","applyOnEvent","encodeMessage","_types","require","_util","registry","data","type","createTypeUnsafe","result","fn","isInBlock","isFinalized","record","findRecord","undefined","message","params","assert","length","args","identifier","Clazz","createClass","JSON","stringify","reduce","r","name","displayName","encodeTypeDef","__selector","compactAddLength","index","selector","toU8a"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,UAAR,GAAqBA,UAArB;AACAF,OAAO,CAACG,YAAR,GAAuBA,YAAvB;AACAH,OAAO,CAACI,aAAR,GAAwBA,aAAxB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAApB;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,gBAAD,CAAnB,C,CAEA;AACA;;;AACA,SAASJ,UAAT,CAAoBM,QAApB,EAA8BC,IAA9B,EAAoC;AAClCC,EAAAA;AADkC,CAApC,EAEG;AACD,SAAO,CAAC,GAAGL,MAAM,CAACM,gBAAX,EAA6BH,QAA7B,EAAuCE,IAAvC,EAA6C,CAACD,IAAD,CAA7C,EAAqD,IAArD,CAAP;AACD;;AAED,SAASN,YAAT,CAAsBS,MAAtB,EAA8BF,IAA9B,EAAoCG,EAApC,EAAwC;AACtC,MAAID,MAAM,CAACE,SAAP,IAAoBF,MAAM,CAACG,WAA/B,EAA4C;AAC1C,UAAMC,MAAM,GAAGJ,MAAM,CAACK,UAAP,CAAkB,WAAlB,EAA+BP,IAA/B,CAAf;;AAEA,QAAIM,MAAJ,EAAY;AACV,aAAOH,EAAE,CAACG,MAAD,CAAT;AACD;AACF;;AAED,SAAOE,SAAP;AACD;;AAED,SAASd,aAAT,CAAuBI,QAAvB,EAAiCW,OAAjC,EAA0CC,MAA1C,EAAkD;AAChD,GAAC,GAAGb,KAAK,CAACc,MAAV,EAAkBF,OAAlB,EAA2B,+CAA3B;AACA,GAAC,GAAGZ,KAAK,CAACc,MAAV,EAAkBD,MAAM,CAACE,MAAP,KAAkBH,OAAO,CAACI,IAAR,CAAaD,MAAjD,EAA0D,YAAWH,OAAO,CAACI,IAAR,CAAaD,MAAO,mCAAkCH,OAAO,CAACK,UAAW,YAAWJ,MAAM,CAACE,MAAO,EAAvK;AACA,QAAMG,KAAK,GAAG,CAAC,GAAGpB,MAAM,CAACqB,WAAX,EAAwBlB,QAAxB,EAAkCmB,IAAI,CAACC,SAAL,CAAeT,OAAO,CAACI,IAAR,CAAaM,MAAb,CAAoB,CAACC,CAAD,EAAI;AACrFC,IAAAA,IADqF;AAErFrB,IAAAA;AAFqF,GAAJ,KAG7E;AACJoB,IAAAA,CAAC,CAACC,IAAD,CAAD,GAAUrB,IAAI,CAACsB,WAAL,IAAoB,CAAC,GAAG3B,MAAM,CAAC4B,aAAX,EAA0BvB,IAA1B,CAA9B;AACA,WAAOoB,CAAP;AACD,GAN8D,EAM5D;AACDI,IAAAA,UAAU,EAAE;AADX,GAN4D,CAAf,CAAlC,CAAd;AASA,SAAO,CAAC,GAAG3B,KAAK,CAAC4B,gBAAV,EAA4B,IAAIV,KAAJ,CAAUjB,QAAV,EAAoBW,OAAO,CAACI,IAAR,CAAaM,MAAb,CAAoB,CAACC,CAAD,EAAI;AAC7EC,IAAAA;AAD6E,GAAJ,EAExEK,KAFwE,KAE9D;AACXN,IAAAA,CAAC,CAACC,IAAD,CAAD,GAAUX,MAAM,CAACgB,KAAD,CAAhB;AACA,WAAON,CAAP;AACD,GALsD,EAKpD;AACDI,IAAAA,UAAU,EAAEf,OAAO,CAACkB;AADnB,GALoD,CAApB,EAO/BC,KAP+B,EAA5B,CAAP;AAQD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatData = formatData;\nexports.applyOnEvent = applyOnEvent;\nexports.encodeMessage = encodeMessage;\n\nvar _types = require(\"@polkadot/types\");\n\nvar _util = require(\"@polkadot/util\");\n\n// Copyright 2017-2020 @polkadot/rpc-core authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction formatData(registry, data, {\n  type\n}) {\n  return (0, _types.createTypeUnsafe)(registry, type, [data], true);\n}\n\nfunction applyOnEvent(result, type, fn) {\n  if (result.isInBlock || result.isFinalized) {\n    const record = result.findRecord('contracts', type);\n\n    if (record) {\n      return fn(record);\n    }\n  }\n\n  return undefined;\n}\n\nfunction encodeMessage(registry, message, params) {\n  (0, _util.assert)(message, 'Attempted to call an invalid contract message');\n  (0, _util.assert)(params.length === message.args.length, `Expected ${message.args.length} arguments to contract message '${message.identifier}', found ${params.length}`);\n  const Clazz = (0, _types.createClass)(registry, JSON.stringify(message.args.reduce((r, {\n    name,\n    type\n  }) => {\n    r[name] = type.displayName || (0, _types.encodeTypeDef)(type);\n    return r;\n  }, {\n    __selector: 'ContractSelector'\n  })));\n  return (0, _util.compactAddLength)(new Clazz(registry, message.args.reduce((r, {\n    name\n  }, index) => {\n    r[name] = params[index];\n    return r;\n  }, {\n    __selector: message.selector\n  })).toU8a());\n}"]},"metadata":{},"sourceType":"script"}