{"ast":null,"code":"var _jsxFileName = \"/Users/aclapinpepin/code/substrate-front-end-template/src/BalancesERC20.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Table, Grid, Button } from 'semantic-ui-react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { useSubstrate } from './substrate-lib';\nimport { Abi, PromiseContract } from '@polkadot/api-contract';\nimport metadata from './erc20/metadata.json';\nexport default function Main(props) {\n  const {\n    api,\n    keyring\n  } = useSubstrate();\n  const accounts = keyring.getPairs();\n  const [balances, setBalances] = useState({}); // ERC20 Contract address as deployed on local node\n\n  const ERC20 = '5HoVabf6G2QyUEbaFUVX4yQBdaNFwUZ7MYQEkkkzxb4hV8Bm'; // Contract owner's address\n\n  const ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY'; // const abi = new Abi(api.registry, JSON.parse(metadata));\n  // const apiContract = new PromiseContract(api, abi, ERC20);\n\n  console.log(metadata);\n\n  const balanceOf = async who => {\n    const result = await this.apiContract.call('rpc', 'balanceOf', 0, 1000000000000, who).send(ALICE);\n    return result.output.toString();\n  };\n\n  console.log(\"HELLOOOO\");\n  useEffect(() => {\n    const addresses = keyring.getPairs().map(account => account.address);\n    let unsubscribeAll = null;\n    api.query.system.account.multi(addresses, balances => {\n      const balancesMap = addresses.reduce((acc, address, index) => ({ ...acc,\n        [address]: balances[index].data.free.toHuman()\n      }), {});\n      setBalances(balancesMap);\n    }).then(unsub => {\n      unsubscribeAll = unsub;\n    }).catch(console.error);\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [api, keyring, setBalances]);\n  return /*#__PURE__*/React.createElement(Grid.Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, \"Balances\"), /*#__PURE__*/React.createElement(Table, {\n    celled: true,\n    striped: true,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Table.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, accounts.map(account => /*#__PURE__*/React.createElement(Table.Row, {\n    key: account.address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Table.Cell, {\n    width: 3,\n    textAlign: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, account.meta.name), /*#__PURE__*/React.createElement(Table.Cell, {\n    width: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: 'inline-block',\n      minWidth: '31em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  }, account.address), /*#__PURE__*/React.createElement(CopyToClipboard, {\n    text: account.address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    basic: true,\n    circular: true,\n    compact: true,\n    size: \"mini\",\n    color: \"blue\",\n    icon: \"copy outline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(Table.Cell, {\n    width: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, balances && balances[account.address] && balances[account.address]))))));\n}","map":{"version":3,"sources":["/Users/aclapinpepin/code/substrate-front-end-template/src/BalancesERC20.js"],"names":["React","useEffect","useState","Table","Grid","Button","CopyToClipboard","useSubstrate","Abi","PromiseContract","metadata","Main","props","api","keyring","accounts","getPairs","balances","setBalances","ERC20","ALICE","console","log","balanceOf","who","result","apiContract","call","send","output","toString","addresses","map","account","address","unsubscribeAll","query","system","multi","balancesMap","reduce","acc","index","data","free","toHuman","then","unsub","catch","error","meta","name","display","minWidth"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Table, Grid, Button } from 'semantic-ui-react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { useSubstrate } from './substrate-lib';\n\nimport { Abi, PromiseContract } from '@polkadot/api-contract';\nimport metadata from './erc20/metadata.json';\n\nexport default function Main (props) {\n  const { api, keyring } = useSubstrate();\n  const accounts = keyring.getPairs();\n  const [balances, setBalances] = useState({});\n\n  // ERC20 Contract address as deployed on local node\n  const ERC20 = '5HoVabf6G2QyUEbaFUVX4yQBdaNFwUZ7MYQEkkkzxb4hV8Bm';\n  // Contract owner's address\n  const ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';\n\n  // const abi = new Abi(api.registry, JSON.parse(metadata));\n  // const apiContract = new PromiseContract(api, abi, ERC20);\n  console.log(metadata)\n\n  const balanceOf = async (who: string) => {\n    const result = await this.apiContract.call('rpc', 'balanceOf', 0, 1000000000000, who)\n      .send(ALICE)\n    return result.output.toString()\n  };\n\n  console.log(\"HELLOOOO\")\n  useEffect(() => {\n    const addresses = keyring.getPairs().map(account => account.address);\n    let unsubscribeAll = null;\n\n    api.query.system.account\n      .multi(addresses, balances => {\n        const balancesMap = addresses.reduce((acc, address, index) => ({\n          ...acc, [address]: balances[index].data.free.toHuman()\n        }), {});\n        setBalances(balancesMap);\n      }).then(unsub => {\n        unsubscribeAll = unsub;\n      }).catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [api, keyring, setBalances]);\n\n  return (\n    <Grid.Column>\n      <h1>Balances</h1>\n      <Table celled striped size='small'>\n        <Table.Body>{accounts.map(account =>\n          <Table.Row key={account.address}>\n            <Table.Cell width={3} textAlign='right'>{account.meta.name}</Table.Cell>\n            <Table.Cell width={10}>\n              <span style={{ display: 'inline-block', minWidth: '31em' }}>\n                {account.address}\n              </span>\n              <CopyToClipboard text={account.address}>\n                <Button\n                  basic\n                  circular\n                  compact\n                  size='mini'\n                  color='blue'\n                  icon='copy outline'\n                />\n              </CopyToClipboard>\n            </Table.Cell>\n            <Table.Cell width={3}>{\n              balances && balances[account.address] &&\n              balances[account.address]\n            }</Table.Cell>\n          </Table.Row>\n        )}\n        </Table.Body>\n      </Table>\n    </Grid.Column>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}