{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = addressToEvm;\n\nvar _decode = _interopRequireDefault(require(\"./decode\")); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name addressToEvm\n * @summary Converts an SS58 address to its corresponding EVM address.\n */\n\n\nfunction addressToEvm(address, ignoreChecksum) {\n  const decoded = (0, _decode.default)(address, ignoreChecksum);\n  return decoded.subarray(0, 20);\n}","map":{"version":3,"sources":["/Users/aclapinpepin/code/substrate-front-end-template/node_modules/@polkadot/rpc-core/node_modules/@polkadot/util-crypto/address/addressToEvm.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","addressToEvm","_decode","address","ignoreChecksum","decoded","subarray"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,YAAlB;;AAEA,IAAIC,OAAO,GAAGR,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,SAASM,YAAT,CAAsBE,OAAtB,EAA+BC,cAA/B,EAA+C;AAC7C,QAAMC,OAAO,GAAG,CAAC,GAAGH,OAAO,CAACF,OAAZ,EAAqBG,OAArB,EAA8BC,cAA9B,CAAhB;AACA,SAAOC,OAAO,CAACC,QAAR,CAAiB,CAAjB,EAAoB,EAApB,CAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = addressToEvm;\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name addressToEvm\n * @summary Converts an SS58 address to its corresponding EVM address.\n */\nfunction addressToEvm(address, ignoreChecksum) {\n  const decoded = (0, _decode.default)(address, ignoreChecksum);\n  return decoded.subarray(0, 20);\n}"]},"metadata":{},"sourceType":"script"}