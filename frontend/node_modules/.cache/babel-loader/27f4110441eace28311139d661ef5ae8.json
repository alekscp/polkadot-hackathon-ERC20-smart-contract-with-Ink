{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = evmToAddress;\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _hasher = _interopRequireDefault(require(\"../secp256k1/hasher\"));\n\nvar _util = require(\"@polkadot/util\"); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name evmToAddress\n * @summary Converts an EVM address to its corresponding SS58 address.\n */\n\n\nfunction evmToAddress(evmAddress, ss58Format, hashType = 'blake2') {\n  const wrapError = message => `Converting ${evmAddress}: ${message}`;\n\n  const message = (0, _util.u8aConcat)('evm:', evmAddress);\n\n  if (message.length !== 24) {\n    throw new Error(wrapError('Invalid evm address length'));\n  }\n\n  const address = (0, _hasher.default)(hashType, message);\n  return (0, _encode.default)(address, ss58Format);\n}","map":{"version":3,"sources":["/Users/aclapinpepin/code/substrate-front-end-template/node_modules/@polkadot/rpc-core/node_modules/@polkadot/util-crypto/address/evmToAddress.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","evmToAddress","_encode","_hasher","_util","evmAddress","ss58Format","hashType","wrapError","message","u8aConcat","length","Error","address"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,YAAlB;;AAEA,IAAIC,OAAO,GAAGR,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC;;AAEA,IAAIQ,OAAO,GAAGT,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAApC;;AAEA,IAAIS,KAAK,GAAGT,OAAO,CAAC,gBAAD,CAAnB,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,SAASM,YAAT,CAAsBI,UAAtB,EAAkCC,UAAlC,EAA8CC,QAAQ,GAAG,QAAzD,EAAmE;AACjE,QAAMC,SAAS,GAAGC,OAAO,IAAK,cAAaJ,UAAW,KAAII,OAAQ,EAAlE;;AAEA,QAAMA,OAAO,GAAG,CAAC,GAAGL,KAAK,CAACM,SAAV,EAAqB,MAArB,EAA6BL,UAA7B,CAAhB;;AAEA,MAAII,OAAO,CAACE,MAAR,KAAmB,EAAvB,EAA2B;AACzB,UAAM,IAAIC,KAAJ,CAAUJ,SAAS,CAAC,4BAAD,CAAnB,CAAN;AACD;;AAED,QAAMK,OAAO,GAAG,CAAC,GAAGV,OAAO,CAACH,OAAZ,EAAqBO,QAArB,EAA+BE,OAA/B,CAAhB;AACA,SAAO,CAAC,GAAGP,OAAO,CAACF,OAAZ,EAAqBa,OAArB,EAA8BP,UAA9B,CAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = evmToAddress;\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _hasher = _interopRequireDefault(require(\"../secp256k1/hasher\"));\n\nvar _util = require(\"@polkadot/util\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name evmToAddress\n * @summary Converts an EVM address to its corresponding SS58 address.\n */\nfunction evmToAddress(evmAddress, ss58Format, hashType = 'blake2') {\n  const wrapError = message => `Converting ${evmAddress}: ${message}`;\n\n  const message = (0, _util.u8aConcat)('evm:', evmAddress);\n\n  if (message.length !== 24) {\n    throw new Error(wrapError('Invalid evm address length'));\n  }\n\n  const address = (0, _hasher.default)(hashType, message);\n  return (0, _encode.default)(address, ss58Format);\n}"]},"metadata":{},"sourceType":"script"}