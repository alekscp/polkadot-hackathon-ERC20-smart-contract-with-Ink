{"ast":null,"code":"var _jsxFileName = \"/Users/aclapinpepin/code/substrate-front-end-template/src/BalancesERC20.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Table, Grid, Button } from 'semantic-ui-react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { useSubstrate } from './substrate-lib';\nimport { Abi, ContractPromise } from '@polkadot/api-contract';\nimport metadata from './erc20/metadata.json';\nexport default function Main(props) {\n  const {\n    api,\n    keyring\n  } = useSubstrate();\n  const accounts = keyring.getPairs();\n  const [balances, setBalances] = useState({}); // ERC20 Contract address as deployed on local node\n\n  const ERC20 = '5HoVabf6G2QyUEbaFUVX4yQBdaNFwUZ7MYQEkkkzxb4hV8Bm';\n  const abi = new Abi(metadata);\n  const apiContract = new ContractPromise(api, abi, ERC20);\n\n  const balanceOf = async who => {\n    const result = await apiContract.balanceOf(addresses.alice).send(ALICE);\n    return result.output.toString();\n  };\n\n  useEffect(() => {\n    // Read from the contract via an RPC call\n    const value = 0; // only useful on isPayable messages\n    // NOTE the apps UI specified these in mega units\n\n    const gasLimit = 3000n * 1000000n; // Default accounts addresses on local node\n\n    const addresses = {\n      alice: '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY',\n      alice_stash: '5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY',\n      bob: '5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty',\n      bob_stash: '5HpG9w8EBLe5XCrbczpwq5TSXvedjrBGCwqxK1iQ7qUsSWFc',\n      charlie: '5FLSigC9HGRKVhB9FiEo4Y3koPsNmBmLJbpXg2mp1hXcS59Y',\n      dave: '5DAAnrj7VHTznn2AWBemMuyBwZWs6FNFjdyVXUeYum3PTXFy',\n      eve: '5HGjWAeFDfFCWPsjFQdVV2Msvz2XtMktvgocEZcCj68kUMaw',\n      ferdie: '5CiPPseXPECbkjWCa6MnjNokrgYjMqmKndv2rSnekmSK2DjL'\n    }; // Contract owner's address\n\n    const ALICE = addresses.alice; // const addresses = keyring.getPairs().map(account => account.address);\n\n    let unsubscribeAll = null;\n    const balancesMap = Object.keys(addresses).reduce((acc, address) => ({ ...acc,\n      [address]: balanceOf(address)\n    }), {});\n    console.log(balancesMap); // console.log(balancesMap)\n\n    setBalances(balancesMap); // api.query.system.account\n    //   .multi(addresses, balances => {\n    //     const balancesMap = addresses.reduce((acc, address, index) => ({\n    //       ...acc, [address]: balances[index].data.free.toHuman()\n    //     }), {});\n    //     setBalances(balancesMap);\n    //   }).then(unsub => {\n    //     unsubscribeAll = unsub;\n    //   }).catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, []);\n  return /*#__PURE__*/React.createElement(Grid.Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, \"Balances ERC20\"), /*#__PURE__*/React.createElement(Table, {\n    celled: true,\n    striped: true,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Table.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, accounts.map(account => /*#__PURE__*/React.createElement(Table.Row, {\n    key: account.address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Table.Cell, {\n    width: 3,\n    textAlign: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, account.meta.name), /*#__PURE__*/React.createElement(Table.Cell, {\n    width: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: 'inline-block',\n      minWidth: '31em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  }, account.address), /*#__PURE__*/React.createElement(CopyToClipboard, {\n    text: account.address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    basic: true,\n    circular: true,\n    compact: true,\n    size: \"mini\",\n    color: \"blue\",\n    icon: \"copy outline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(Table.Cell, {\n    width: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, balances && balances[account.address] && balances[account.address]))))));\n}","map":{"version":3,"sources":["/Users/aclapinpepin/code/substrate-front-end-template/src/BalancesERC20.js"],"names":["React","useEffect","useState","Table","Grid","Button","CopyToClipboard","useSubstrate","Abi","ContractPromise","metadata","Main","props","api","keyring","accounts","getPairs","balances","setBalances","ERC20","abi","apiContract","balanceOf","who","result","addresses","alice","send","ALICE","output","toString","value","gasLimit","alice_stash","bob","bob_stash","charlie","dave","eve","ferdie","unsubscribeAll","balancesMap","Object","keys","reduce","acc","address","console","log","map","account","meta","name","display","minWidth"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Table, Grid, Button } from 'semantic-ui-react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { useSubstrate } from './substrate-lib';\n\nimport { Abi, ContractPromise } from '@polkadot/api-contract';\nimport metadata from './erc20/metadata.json';\n\nexport default function Main (props) {\n  const { api, keyring } = useSubstrate();\n  const accounts = keyring.getPairs();\n  const [balances, setBalances] = useState({});\n\n  // ERC20 Contract address as deployed on local node\n  const ERC20 = '5HoVabf6G2QyUEbaFUVX4yQBdaNFwUZ7MYQEkkkzxb4hV8Bm';\n  const abi = new Abi(metadata);\n  const apiContract = new ContractPromise(api, abi, ERC20);\n\n  const balanceOf = async (who) => {\n    const result = await apiContract.balanceOf(addresses.alice)\n      .send(ALICE);\n    return result.output.toString();\n  };\n\n  useEffect(() => {\n\n    // Read from the contract via an RPC call\n    const value = 0; // only useful on isPayable messages\n\n    // NOTE the apps UI specified these in mega units\n    const gasLimit = 3000n * 1000000n;\n\n    // Default accounts addresses on local node\n    const addresses = {\n      alice: '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY',\n      alice_stash: '5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY',\n      bob: '5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty',\n      bob_stash: '5HpG9w8EBLe5XCrbczpwq5TSXvedjrBGCwqxK1iQ7qUsSWFc',\n      charlie: '5FLSigC9HGRKVhB9FiEo4Y3koPsNmBmLJbpXg2mp1hXcS59Y',\n      dave: '5DAAnrj7VHTznn2AWBemMuyBwZWs6FNFjdyVXUeYum3PTXFy',\n      eve: '5HGjWAeFDfFCWPsjFQdVV2Msvz2XtMktvgocEZcCj68kUMaw',\n      ferdie: '5CiPPseXPECbkjWCa6MnjNokrgYjMqmKndv2rSnekmSK2DjL'\n    };\n\n    // Contract owner's address\n    const ALICE = addresses.alice;\n\n    // const addresses = keyring.getPairs().map(account => account.address);\n    let unsubscribeAll = null;\n\n    const balancesMap = Object.keys(addresses).reduce((acc, address) => ({\n      ...acc, [address]: balanceOf(address)\n    }), {});\n\n    console.log(balancesMap)\n    // console.log(balancesMap)\n    setBalances(balancesMap);\n    // api.query.system.account\n    //   .multi(addresses, balances => {\n    //     const balancesMap = addresses.reduce((acc, address, index) => ({\n    //       ...acc, [address]: balances[index].data.free.toHuman()\n    //     }), {});\n    //     setBalances(balancesMap);\n    //   }).then(unsub => {\n    //     unsubscribeAll = unsub;\n    //   }).catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, []);\n\n  return (\n    <Grid.Column>\n      <h1>Balances ERC20</h1>\n      <Table celled striped size='small'>\n        <Table.Body>{accounts.map(account =>\n          <Table.Row key={account.address}>\n            <Table.Cell width={3} textAlign='right'>{account.meta.name}</Table.Cell>\n            <Table.Cell width={10}>\n              <span style={{ display: 'inline-block', minWidth: '31em' }}>\n                {account.address}\n              </span>\n              <CopyToClipboard text={account.address}>\n                <Button\n                  basic\n                  circular\n                  compact\n                  size='mini'\n                  color='blue'\n                  icon='copy outline'\n                />\n              </CopyToClipboard>\n            </Table.Cell>\n            <Table.Cell width={3}>{\n              balances && balances[account.address] &&\n              balances[account.address]\n            }</Table.Cell>\n          </Table.Row>\n        )}\n        </Table.Body>\n      </Table>\n    </Grid.Column>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}