{"ast":null,"code":"var _jsxFileName = \"/Users/aclapinpepin/code/substrate-front-end-template/src/BalancesERC20.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Table, Grid, Button } from 'semantic-ui-react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { useSubstrate } from './substrate-lib';\nimport { Abi, ContractPromise } from '@polkadot/api-contract';\nimport metadata from './erc20/metadata.json';\nimport { apiContract, gasLimit } from './utils/apiContract';\nexport default function Main(props) {\n  const {\n    api,\n    keyring\n  } = useSubstrate();\n  const accounts = keyring.getPairs();\n  const [balances, setBalances] = useState({});\n  const contract = apiContract(api);\n\n  const balanceOf = async who => {\n    const result = await contract.query.balanceOf(who, 0, gasLimit, who);\n    return result.output.toString();\n  };\n\n  const updateBalances = async () => {\n    const balances = [];\n    const pairs = await keyring.getPairs();\n    await Promise.all(pairs.map(async pair => {\n      balances[pair.address] = await balanceOf(pair.address);\n    }));\n    setBalances(balances);\n  };\n\n  const displayBalance = balance => {\n    return balance.toString() + ' Tokens';\n  };\n\n  useEffect(() => {\n    const addresses = keyring.getPairs().map(account => account.address);\n    let unsubscribeAll = null;\n    api.query.system.account.multi(addresses, balances => {\n      updateBalances(addresses);\n    }).then(unsub => {\n      unsubscribeAll = unsub;\n    }).catch(console.error);\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [api, keyring, setBalances]);\n  return /*#__PURE__*/React.createElement(Grid.Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, \"Balances ERC20\"), /*#__PURE__*/React.createElement(Table, {\n    celled: true,\n    striped: true,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Table.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, accounts.map(account => /*#__PURE__*/React.createElement(Table.Row, {\n    key: account.address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Table.Cell, {\n    width: 3,\n    textAlign: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, account.meta.name), /*#__PURE__*/React.createElement(Table.Cell, {\n    width: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: 'inline-block',\n      minWidth: '31em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }, account.address), /*#__PURE__*/React.createElement(CopyToClipboard, {\n    text: account.address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    basic: true,\n    circular: true,\n    compact: true,\n    size: \"mini\",\n    color: \"blue\",\n    icon: \"copy outline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(Table.Cell, {\n    width: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, balances && balances[account.address] && displayBalance(balances[account.address])))))));\n}","map":{"version":3,"sources":["/Users/aclapinpepin/code/substrate-front-end-template/src/BalancesERC20.js"],"names":["React","useEffect","useState","Table","Grid","Button","CopyToClipboard","useSubstrate","Abi","ContractPromise","metadata","apiContract","gasLimit","Main","props","api","keyring","accounts","getPairs","balances","setBalances","contract","balanceOf","who","result","query","output","toString","updateBalances","pairs","Promise","all","map","pair","address","displayBalance","balance","addresses","account","unsubscribeAll","system","multi","then","unsub","catch","console","error","meta","name","display","minWidth"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Table, Grid, Button } from 'semantic-ui-react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { useSubstrate } from './substrate-lib';\n\nimport { Abi, ContractPromise } from '@polkadot/api-contract';\nimport metadata from './erc20/metadata.json';\n\nimport { apiContract, gasLimit } from './utils/apiContract';\n\nexport default function Main (props) {\n  const { api, keyring } = useSubstrate();\n  const accounts = keyring.getPairs();\n  const [balances, setBalances] = useState({});\n\n  const contract = apiContract(api);\n\n  const balanceOf = async (who) => {\n    const result = await contract.query.balanceOf(who, 0, gasLimit, who);\n\n    return result.output.toString();\n  };\n\n  const updateBalances = async () => {\n    const balances = [];\n\n    const pairs = await keyring.getPairs();\n\n    await Promise.all(pairs.map(async (pair) => {\n      balances[pair.address] = await balanceOf(pair.address);\n    }));\n\n    setBalances(balances);\n  };\n\n  const displayBalance = (balance) => {\n    return balance.toString() + ' Tokens';\n  };\n\n  useEffect(() => {\n    const addresses = keyring.getPairs().map(account => account.address);\n    let unsubscribeAll = null;\n\n    api.query.system.account\n      .multi(addresses, balances => {\n        updateBalances(addresses)\n      }).then(unsub => {\n        unsubscribeAll = unsub;\n      }).catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [api, keyring, setBalances]);\n\n  return (\n    <Grid.Column>\n      <h1>Balances ERC20</h1>\n      <Table celled striped size='small'>\n        <Table.Body>{accounts.map(account =>\n          <Table.Row key={account.address}>\n            <Table.Cell width={3} textAlign='right'>{account.meta.name}</Table.Cell>\n            <Table.Cell width={10}>\n              <span style={{ display: 'inline-block', minWidth: '31em' }}>\n                {account.address}\n              </span>\n              <CopyToClipboard text={account.address}>\n                <Button\n                  basic\n                  circular\n                  compact\n                  size='mini'\n                  color='blue'\n                  icon='copy outline'\n                />\n              </CopyToClipboard>\n            </Table.Cell>\n            <Table.Cell width={3}>\n              {\n                balances && balances[account.address] &&\n                displayBalance(balances[account.address])\n              }\n            </Table.Cell>\n          </Table.Row>\n        )}\n        </Table.Body>\n      </Table>\n    </Grid.Column>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}